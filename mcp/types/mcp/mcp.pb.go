// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.19.4
// source: mcp.proto

package mcp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 请求消息（分块传输）
type PdfRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*PdfRequest_Metadata
	//	*PdfRequest_Chunk
	Data          isPdfRequest_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PdfRequest) Reset() {
	*x = PdfRequest{}
	mi := &file_mcp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PdfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfRequest) ProtoMessage() {}

func (x *PdfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfRequest.ProtoReflect.Descriptor instead.
func (*PdfRequest) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{0}
}

func (x *PdfRequest) GetData() isPdfRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PdfRequest) GetMetadata() *Metadata {
	if x != nil {
		if x, ok := x.Data.(*PdfRequest_Metadata); ok {
			return x.Metadata
		}
	}
	return nil
}

func (x *PdfRequest) GetChunk() []byte {
	if x != nil {
		if x, ok := x.Data.(*PdfRequest_Chunk); ok {
			return x.Chunk
		}
	}
	return nil
}

type isPdfRequest_Data interface {
	isPdfRequest_Data()
}

type PdfRequest_Metadata struct {
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"` //首条消息包含元数据
}

type PdfRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"` //后续消息为数据块
}

func (*PdfRequest_Metadata) isPdfRequest_Data() {}

func (*PdfRequest_Chunk) isPdfRequest_Data() {}

// 响应消息
type PdfResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"` //解析后的文本内容
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`     //错误信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PdfResponse) Reset() {
	*x = PdfResponse{}
	mi := &file_mcp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PdfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfResponse) ProtoMessage() {}

func (x *PdfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfResponse.ProtoReflect.Descriptor instead.
func (*PdfResponse) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{1}
}

func (x *PdfResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PdfResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// 文件元数据
type Metadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	MimeType      string                 `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_mcp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{2}
}

func (x *Metadata) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Metadata) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

var File_mcp_proto protoreflect.FileDescriptor

const file_mcp_proto_rawDesc = "" +
	"\n" +
	"\tmcp.proto\x12\x03mcp\"Y\n" +
	"\n" +
	"PdfRequest\x12+\n" +
	"\bmetadata\x18\x01 \x01(\v2\r.mcp.MetadataH\x00R\bmetadata\x12\x16\n" +
	"\x05chunk\x18\x02 \x01(\fH\x00R\x05chunkB\x06\n" +
	"\x04data\"=\n" +
	"\vPdfResponse\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"C\n" +
	"\bMetadata\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1b\n" +
	"\tmime_type\x18\x02 \x01(\tR\bmimeType2D\n" +
	"\fPdfProcessor\x124\n" +
	"\vExtractText\x12\x0f.mcp.PdfRequest\x1a\x10.mcp.PdfResponse\"\x00(\x01B\aZ\x05./mcpb\x06proto3"

var (
	file_mcp_proto_rawDescOnce sync.Once
	file_mcp_proto_rawDescData []byte
)

func file_mcp_proto_rawDescGZIP() []byte {
	file_mcp_proto_rawDescOnce.Do(func() {
		file_mcp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mcp_proto_rawDesc), len(file_mcp_proto_rawDesc)))
	})
	return file_mcp_proto_rawDescData
}

var file_mcp_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_mcp_proto_goTypes = []any{
	(*PdfRequest)(nil),  // 0: mcp.PdfRequest
	(*PdfResponse)(nil), // 1: mcp.PdfResponse
	(*Metadata)(nil),    // 2: mcp.Metadata
}
var file_mcp_proto_depIdxs = []int32{
	2, // 0: mcp.PdfRequest.metadata:type_name -> mcp.Metadata
	0, // 1: mcp.PdfProcessor.ExtractText:input_type -> mcp.PdfRequest
	1, // 2: mcp.PdfProcessor.ExtractText:output_type -> mcp.PdfResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_mcp_proto_init() }
func file_mcp_proto_init() {
	if File_mcp_proto != nil {
		return
	}
	file_mcp_proto_msgTypes[0].OneofWrappers = []any{
		(*PdfRequest_Metadata)(nil),
		(*PdfRequest_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mcp_proto_rawDesc), len(file_mcp_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mcp_proto_goTypes,
		DependencyIndexes: file_mcp_proto_depIdxs,
		MessageInfos:      file_mcp_proto_msgTypes,
	}.Build()
	File_mcp_proto = out.File
	file_mcp_proto_goTypes = nil
	file_mcp_proto_depIdxs = nil
}
